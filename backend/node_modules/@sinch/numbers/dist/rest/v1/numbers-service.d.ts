import { ApiListPromise, SinchClientParameters } from '@sinch/sdk-client';
import { AvailableRegionsApi } from './available-regions';
import { CallbacksApi } from './callbacks';
import { AvailableNumberApi } from './available-number';
import { ActiveNumberApi } from './active-number';
import { ActiveNumber, AvailableNumber, AvailableNumbersResponse, GetActiveNumberRequestData, GetAvailableNumberRequestData, ListActiveNumbersRequestData, ListAvailableNumbersRequestData, ReleaseNumberRequestData, RentAnyNumberRequestData, RentNumberRequestData, UpdateActiveNumberRequestData } from '../../models';
/**
 * The Numbers Service exposes the following APIs:
 *  - availableRegions
 *  - availableNumber
 *  - activeNumber
 *  - callbacks
 */
export declare class NumbersService {
    readonly availableRegions: AvailableRegionsApi;
    readonly callbacks: CallbacksApi;
    /** @deprecated Use the methods exposed at the Numbers Service level instead */
    readonly availableNumber: AvailableNumberApi;
    /** @deprecated Use the methods exposed at the Numbers Service level instead */
    readonly activeNumber: ActiveNumberApi;
    /**
     * Create a new NumbersService instance with its configuration. It needs the following parameters for authentication:
     *  - `projectId`
     *  - `keyId`
     *  - `keySecret`
     *
     * Other supported properties:
     *  - `numbersHostname`
     * @param {SinchClientParameters} params - an Object containing the necessary properties to initialize the service
     */
    constructor(params: SinchClientParameters);
    /**
     * Update the default hostname for each API
     *
     * @param {string} hostname - The new hostname to use for all the APIs.
     */
    setHostname(hostname: string): void;
    /**
     * This endpoint allows you to enter a specific phone number to check if it's available for use.
     * A 200 response will return the number's capability, setup costs, monthly costs and if supporting documentation is required.
     * If the phone number is not available, the API will return a 404 error.
     * @param {GetAvailableNumberRequestData} data - The data to provide to the API call.
     */
    checkAvailability(data: GetAvailableNumberRequestData): Promise<AvailableNumber>;
    /**
     * Search for virtual numbers that are available for you to activate. You can filter by any property on the available number resource.
     * @param {ListAvailableNumbersRequestData} data - The data to provide to the API call.
     */
    searchForAvailableNumbers(data: ListAvailableNumbersRequestData): Promise<AvailableNumbersResponse>;
    /**
     * Rent any virtual number that matches the criteria (Search for and activate an available Sinch virtual number all in one API call).
     * @param {RentAnyNumberRequestData} data - The data to provide to the API call.
     */
    rentAny(data: RentAnyNumberRequestData): Promise<ActiveNumber>;
    /**
     * Rent a virtual number to use with SMS products, Voice products, or both. You'll use 'smsConfiguration' to set up your number for SMS and 'voiceConfiguration' for Voice.
     * @param {RentNumberRequestData} data - The data to provide to the API call.
     */
    rent(data: RentNumberRequestData): Promise<ActiveNumber>;
    /**
     * Retrieve a virtual number's details
     * @param {GetActiveNumberRequestData} data - The data to provide to the API call.
     */
    get(data: GetActiveNumberRequestData): Promise<ActiveNumber>;
    /**
     * Lists all virtual numbers for a project.
     * @param {ListActiveNumbersRequestData} data - The data to provide to the API call.
     * @return {ApiListPromise<ActiveNumber>}
     */
    list(data: ListActiveNumbersRequestData): ApiListPromise<ActiveNumber>;
    /**
     * Release number.
     * With this endpoint, you can cancel your subscription for a specific virtual phone number.
     * @param {ReleaseNumberRequestData} data - The data to provide to the API call.
     */
    release(data: ReleaseNumberRequestData): Promise<ActiveNumber>;
    /**
     * Update a virtual phone number. For example: you can configure SMS/Voice services or set a friendly name. To update the name that displays, modify the `displayName` parameter.
     * You'll use `smsConfiguration` to update your SMS configuration and `voiceConfiguration` to update the voice configuration.
     * @param {UpdateActiveNumberRequestData} data - The data to provide to the API call.
     */
    update(data: UpdateActiveNumberRequestData): Promise<ActiveNumber>;
}
