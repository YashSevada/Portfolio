"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportVerificationByIdentityHelper = exports.reportVerificationByIdHelper = exports.startVerificationHelper = void 0;
exports.startVerificationHelper = {
    /**
     * Builds a request object for starting an SMS verification process.
     *
     * @param {string} phoneNumber - The phone number to which the verification SMS should be sent.
     * @param {string} [reference] - An optional reference identifier used to pass your own reference in the request for tracking purposes.
     * @param {SmsOptions} [smsOptions] - Optional parameters for configuring the SMS verification request, with default values assumed for all contained values if not provided.
     * @return {StartSmsVerificationRequestData} The constructed SMS verification request data.
     */
    buildSmsRequest: (phoneNumber, reference, smsOptions) => {
        return {
            startVerificationWithSmsRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
                ...(smsOptions !== undefined) ? {
                    smsOptions: {
                        ...smsOptions,
                    },
                } : {},
            },
        };
    },
    /**
     * Builds a request object for starting a phone call verification process.
     *
     * @param {string} phoneNumber - The phone number to which the verification call should be made.
     * @param {string} [reference] - An optional reference identifier used to pass your own reference in the request for tracking purposes.
     * @param {string} [locale] - An optional language-region identifier to use for the verification call.
     * @return {StartPhoneCallVerificationRequestData} The request data object for initiating the phone call verification.
     */
    buildPhoneCallRequest: (phoneNumber, reference, locale) => {
        return {
            startVerificationWithPhoneCallRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
                ...(locale !== undefined) ? {
                    phoneCallOptions: {
                        speech: {
                            locale,
                        },
                    },
                } : {},
            },
        };
    },
    /**
     * Builds a callout request body with the provided phone number, reference, and locale.
     *
     * @param {string} phoneNumber - The phone number to which the callout will be made.
     * @param {string} [reference] - An optional reference identifier for the callout.
     * @param {string} [locale] - An optional locale string to specify the language or region for the callout.
     * @return {StartCalloutVerificationRequestData} The constructed callout request object.
     * @deprecated Use the method buildPhoneCallRequest() instead
     */
    buildCalloutRequest: (phoneNumber, reference, locale) => {
        return {
            startVerificationWithCalloutRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
                ...(locale !== undefined) ? {
                    calloutOptions: {
                        speech: {
                            locale,
                        },
                    },
                } : {},
            },
        };
    },
    /**
     * Builds a request object for starting a flash call verification process.
     *
     * @param {string} phoneNumber - The phone number to which the flash call verification should be made.
     * @param {string} [reference] - An optional reference identifier used to pass your own reference in the request for tracking purposes.
     * @param {number} [dialTimeout] - An optional timeout value in seconds for how long to wait for the flash call to be answered.
     * @return {StartFlashCallVerificationRequestData} The request data object for initiating the flash call verification.
     */
    buildFlashCallRequest: (phoneNumber, reference, dialTimeout) => {
        return {
            startVerificationWithFlashCallRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
                ...(dialTimeout !== undefined) ? {
                    flashCallOptions: {
                        dialTimeout,
                    },
                } : {},
            },
        };
    },
    /**
     * Builds a request object for initiating a data verification process.
     *
     * @param {string} phoneNumber - The phone number to be verified.
     * @param {string} [reference] - An optional reference identifier used to pass your own reference in the request for tracking purposes.
     * @return {StartDataVerificationRequestData} The request data object used to start the data verification.
     */
    buildDataRequest: (phoneNumber, reference) => {
        return {
            startDataVerificationRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
            },
        };
    },
    /**
     * Builds a seamless verification request body with the provided phone number and optional reference.
     *
     * @param {string} phoneNumber - The phone number to verify.
     * @param {string} [reference] - An optional reference identifier for the verification request.
     * @return {StartSeamlessVerificationRequestData} The constructed seamless verification request data.
     * @deprecated Use the method buildDataRequest() instead
     */
    buildSeamlessRequest: (phoneNumber, reference) => {
        return {
            startSeamlessVerificationRequestBody: {
                identity: {
                    type: 'number',
                    endpoint: phoneNumber,
                },
                reference,
            },
        };
    },
};
exports.reportVerificationByIdHelper = {
    /**
     * Builds a request object for reporting an SMS verification by its ID.
     *
     * @param {string} id - The unique identifier for the SMS verification request.
     * @param {string} code - The verification code received via SMS.
     * @param {string} [cli] - An optional CLI (Caller Line Identification) that can be included in the request.
     * @return {ReportSmsVerificationByIdRequestData} The request data object used to report the SMS verification.
     */
    buildSmsRequest: (id, code, cli) => {
        return {
            id,
            reportSmsVerificationByIdRequestBody: {
                sms: {
                    code,
                    cli,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a phone call verification by its ID.
     *
     * @param {string} id - The unique identifier for the phone call verification request.
     * @param {string} code - The verification code received during the phone call.
     * @return {ReportPhoneCallVerificationByIdRequestData} The request data object used to report the phone call verification.
     */
    buildPhoneCallRequest: (id, code) => {
        return {
            id,
            reportPhoneCallVerificationByIdRequestBody: {
                phoneCall: {
                    code,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a callout verification by its ID.
     *
     * @param {string} id - The unique identifier for the callout verification request.
     * @param {string} code - The verification code received during the callout.
     * @return {ReportCalloutVerificationByIdRequestData} The request data object used to report the callout verification.
     * @deprecated Use the method buildPhoneCallRequest() instead
     */
    buildCalloutRequest: (id, code) => {
        return {
            id,
            reportCalloutVerificationByIdRequestBody: {
                callout: {
                    code,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a flash call verification by its ID.
     *
     * @param {string} id - The unique identifier for the flash call verification request.
     * @param {string} cli - The CLI (Caller Line Identification) received during the flash call.
     * @return {ReportFlashCallVerificationByIdRequestData} The request data object used to report the flash call verification.
     */
    buildFlashCallRequest: (id, cli) => {
        return {
            id,
            reportFlashCallVerificationByIdRequestBody: {
                flashCall: {
                    cli,
                },
            },
        };
    },
};
exports.reportVerificationByIdentityHelper = {
    /**
     * Builds a request object for reporting an SMS verification by the phone number identity.
     *
     * @param {string} identity - The phone number for which the verification process has been initiated.
     * @param {string} code - The verification code received via SMS.
     * @param {string} [cli] - The CLI (Caller Line Identification) that may be used during the verification.
     * @return {ReportSmsVerificationByIdentityRequestData} The request data object used to report the SMS verification.
     */
    buildSmsRequest: (identity, code, cli) => {
        return {
            endpoint: identity,
            reportSmsVerificationByIdentityRequestBody: {
                sms: {
                    code,
                    cli,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a phone call verification by the phone number identity.
     *
     * @param {string} identity - The phone number for which the verification process has been initiated.
     * @param {string} code - The verification code received via the phone call.
     * @return {ReportPhoneCallVerificationByIdentityRequestData} The request data object used to report the phone call verification.
     */
    buildPhoneCallRequest: (identity, code) => {
        return {
            endpoint: identity,
            reportPhoneCallVerificationByIdentityRequestBody: {
                phoneCall: {
                    code,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a callout verification by the phone number identity.
     *
     * @param {string} identity - The phone number for which the callout verification process has been initiated.
     * @param {string} code - The verification code received during the callout.
     * @return {ReportCalloutVerificationByIdentityRequestData} The request data object used to report the callout verification.
     * @deprecated Use the method buildPhoneCallRequest() instead
     */
    buildCalloutRequest: (identity, code) => {
        return {
            endpoint: identity,
            reportCalloutVerificationByIdentityRequestBody: {
                callout: {
                    code,
                },
            },
        };
    },
    /**
     * Builds a request object for reporting a flash call verification by the phone number identity.
     *
     * @param {string} identity - The phone number for which the flash call verification process has been initiated.
     * @param {string} cli - The CLI (Caller Line Identification) received during the flash call.
     * @return {ReportFlashCallVerificationByIdentityRequestData} The request data object used to report the flash call verification.
     */
    buildFlashCallRequest: (identity, cli) => {
        return {
            endpoint: identity,
            reportFlashCallVerificationByIdentityRequestBody: {
                flashCall: {
                    cli,
                },
            },
        };
    },
};
//# sourceMappingURL=helper.js.map