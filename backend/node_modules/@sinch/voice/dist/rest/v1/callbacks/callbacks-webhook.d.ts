/// <reference types="node" />
import { AceRequest, DiceRequest, IceRequest, NotifyRequest, PieRequest, VoiceCallbackEvent } from '../../../models';
import { CallbackProcessor, SinchClientParameters } from '@sinch/sdk-client';
import { IncomingHttpHeaders } from 'http';
/** @deprecated Use Voice.VoiceCallbackEvent instead */
export type VoiceCallback = IceRequest | AceRequest | DiceRequest | PieRequest | NotifyRequest;
export declare class VoiceCallbackWebhooks implements CallbackProcessor<VoiceCallbackEvent> {
    private readonly sinchClientParameters;
    constructor(sinchClientParameters: SinchClientParameters);
    /**
     * Validate authorization header for callback request
     * @param {IncomingHttpHeaders} headers - Incoming request's headers
     * @param {any} body - Incoming request's body
     * @param {string} path - Incoming request's path
     * @param {string} method - Incoming request's HTTP method
     * @return {boolean} - true if the authorization header is valid
     */
    validateAuthenticationHeader(headers: IncomingHttpHeaders, body: any, path: string, method: string): boolean;
    /**
     * Reviver for a Voice Event.
     * This method ensures the object can be treated as a Voice Event and should be called before any action is taken to manipulate the object.
     * @param {any} eventBody - The event body containing the voice event notification.
     * @return {VoiceCallbackEvent} - The parsed voice event object.
     */
    parseEvent(eventBody: any): VoiceCallbackEvent;
}
